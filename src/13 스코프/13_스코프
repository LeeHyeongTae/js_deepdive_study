## 1. 스코프란?

> 스코프(scope, 유효 범위) : 식별자가 유요한 범위, 식별자 검색할 때 사용 규칙, 네임 스페이스
> 식별자 결정(identifier resolution):자바스크립트 엔진이 어떤 변수를 참조할지 결정하는 것 (스코프를 통해 결정)

매개변수의 스코프: 함수 몸체 내부

변수는 코드의 가장 바깥 영역뿐만 아니라 코드 블록이나 함수 몸체 내에서도 선언할 수 있다. 이때 코드 블록이나 함수는 중첩될 수 있다.

변수는 자신이 선언된 위치에 의해 자신의 유효한 범위, 즉 다른 코드가 변수 자신을 참조할 수 있는 범위가 결정

## 2. 스코프의 종류

> 전역 스코프 : 코드의 가장 바깥 영역, 전역 변수, 어디서든지 참조 가능
> 지역 스코프 : 함수 몸체 내부, 지역 변수, 자신의 지역 스코프와 하위 지역 스코프에서 유효

자신이 선언된 위치(전역 또는 지역)에 의해 자신이 유효한 범위인 스코프가 결정

- 지역 : 함수 몸체 내부

## 3. 스코프 체인

- 함수의 중첩: 함수 몸체 내부에서 함수가 정의된 것
- 중첩 함수: 함수 몸체 내부에서 정의한 함수
- 외부 함수: 중첩 함수를 포함하는 함수


- 스코프 : 함수의 중첩에 의해 계층적 구조를 갖는다. 즉 중첩 함수의 지역 스코프는 중첩 함수를 포함하는 외부 함수의 지역 스코프와 계층적 구조를 갖는다.
- 스코프 체인 : 스코프가 계층적으로 연결된 것

- 변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.

- 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만 하위 스코프에서 유효한 변수를 상위 스코프에서 참조 할 수 없다. (상속)


## 4. 함수 레벨 스코프
> 함수의 코드 블록(함수 몸체)만을 지역 스코프로 인정


- var로 선언된 변수는 함수 레벨 스코프
	: var로 선언된 뵨수는 코드 블록 내에서 선언되었다 할지라도 모두 전역 변수이다.
    
- ES6부터 도입된 let, const는 블록 레벨 스코프 지원



## 5. 렉시컬 스코프

- 동적 스코프 : 함수를 호출하는 시점에 동적으로 상위 스코프를 결정
- 정적 스코프 (렉시컬 스코프) : 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정

자바스크립트는 렉시컬 스코프를 따르므로 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는지에 따라 상위 스코프를 결정, 즉 함수의 상위 스코프는 언제나 자신이 정의된 스코프

